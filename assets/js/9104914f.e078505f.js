"use strict";(self.webpackChunkkrateo_v_2_docs=self.webpackChunkkrateo_v_2_docs||[]).push([[3536],{7920:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>l,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var i=t(7624),r=t(2172);const a={},s="action-button-guide",o={id:"how-to-guides/write-frontend/action-button-guide",title:"action-button-guide",description:"Prerequisites",source:"@site/docs/30-how-to-guides/40-write-frontend/11-action-button-guide.md",sourceDirName:"30-how-to-guides/40-write-frontend",slug:"/how-to-guides/write-frontend/action-button-guide",permalink:"/how-to-guides/write-frontend/action-button-guide",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:11,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"simple-page-guide",permalink:"/how-to-guides/write-frontend/simple-page-guide"},next:{title:"core-provider",permalink:"/core-crd-reference/core-provider-crd"}},d={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Where we left off",id:"where-we-left-off",level:2},{value:"Next steps",id:"next-steps",level:2},{value:"Lets make a step forward",id:"lets-make-a-step-forward",level:2},{value:"how it works",id:"how-it-works",level:3}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",p:"p",pre:"pre",...(0,r.M)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"action-button-guide",children:"action-button-guide"}),"\n",(0,i.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,i.jsxs)(n.p,{children:["NB: This guide depends on ",(0,i.jsx)(n.a,{href:"/how-to-guides/write-frontend/simple-page-guide",children:"Simple page guide"})," complete it first."]}),"\n",(0,i.jsx)(n.h2,{id:"where-we-left-off",children:"Where we left off"}),"\n",(0,i.jsxs)(n.p,{children:["We have created a ",(0,i.jsx)(n.code,{children:"Button"})," and a ",(0,i.jsx)(n.code,{children:"Page"})," that references it. In order to see display the page we created a ",(0,i.jsx)(n.code,{children:"NavMenuItem"})," that navigates to it."]}),"\n",(0,i.jsx)(n.h2,{id:"next-steps",children:"Next steps"}),"\n",(0,i.jsxs)(n.p,{children:["We will update the ",(0,i.jsx)(n.code,{children:"Button"})," to trigger an action on click, there are different types of actions that can be triggered by a button, in this guide we will use the ",(0,i.jsx)(n.code,{children:"openDrawer"})," action, more info about actions can be found in ",(0,i.jsx)(n.a,{href:"/key-concepts/kcp/frontend",children:"docs"})]}),"\n",(0,i.jsxs)(n.p,{children:["NB: the namespace and the name of the ",(0,i.jsx)(n.code,{children:"Button"})," is the same as the one used in the ",(0,i.jsx)(n.a,{href:"/how-to-guides/write-frontend/simple-page-guide",children:"Simple page guide"}),", so beware that we will overwrite the one created in the previous guide."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:'cat <<EOF | kubectl apply -f -\nkind: Button\napiVersion: widgets.templates.krateo.io/v1beta1\nmetadata:\n  name: simple-guide-button\n  namespace: simple-guide\nspec:\n  widgetData:\n    icon: fa-sun\n    label: I was updated again!!!\n    clickActionId: openDrawer-action-id # <- this needs to match the id of an action declared below in spec.actions\n    actions: \n      openDrawer:\n        - id: openDrawer-action-id \n          resourceRefId: paragraph-id # <- this needs to match the id of a resource declared below in spec.resourcesRefs\n          type: openDrawer\n          title: Composition form\n          size: large\n  resourcesRefs:\n    items:\n      - id: paragraph-id\n        apiVersion: widgets.templates.krateo.io/v1beta1\n        name: simple-guide-paragraph\n        namespace: simple-guide\n        resource: paragraphs\n        verb: GET\n---\nkind: Paragraph\napiVersion: widgets.templates.krateo.io/v1beta1\nmetadata:\n  name: simple-guide-paragraph\n  namespace: simple-guide\nspec:\n  widgetData:\n    text: "This is a paragraph"\nEOF\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Try clicking the button, you should see a drawer with the content of the ",(0,i.jsx)(n.code,{children:"Paragraph"})," widget we declared in the ",(0,i.jsx)(n.code,{children:"resourcesRefs"})," section."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"drawer-paragraph",src:t(6336).c+"",width:"3016",height:"1686"})}),"\n",(0,i.jsx)(n.h2,{id:"lets-make-a-step-forward",children:"Lets make a step forward"}),"\n",(0,i.jsxs)(n.p,{children:["Le's introduce a new widget, the ",(0,i.jsx)(n.code,{children:"Form"})," widget, this widget can be used to create a new resource in the cluster."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"cat <<EOF | kubectl apply -f -\nkind: Button\napiVersion: widgets.templates.krateo.io/v1beta1\nmetadata:\n  name: simple-guide-button\n  namespace: simple-guide\nspec:\n  widgetData:\n    icon: fa-sun\n    label: I open a drawer with a form\n    clickActionId: openDrawer-action-id # <- this needs to match the id of an action declared below in spec.actions\n    actions: \n      openDrawer:\n        - id: openDrawer-action-id \n          resourceRefId: form-id # <- this needs to match the id of a resource declared below in spec.resourcesRefs\n          type: openDrawer\n          title: Composition form\n          size: large\n  resourcesRefs:\n    items:\n      - id: form-id\n        apiVersion: widgets.templates.krateo.io/v1beta1\n        name: simple-guide-form\n        namespace: simple-guide\n        resource: forms\n        verb: GET\nEOF\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:'kubectl apply -f - <<\'YAML\'\nkind: Form\napiVersion: widgets.templates.krateo.io/v1beta1\nmetadata:\n  name: simple-guide-form\n  namespace: simple-guide\nspec:\n  widgetData:\n    stringSchema: |\n      {\n        "type": "object",\n        "properties": {\n          "name": {\n            "type": "string",\n            "title": "Pod Name",\n            "description": "The name of your Nginx pod"\n          }\n        },\n        "required": ["name"]\n      }\n    submitActionId: submit-action-id\n    actions:\n      rest:\n        - id: submit-action-id\n          resourceRefId: resource-ref-1\n          type: rest\n          payloadKey: spec\n          payloadToOverride:\n            - name: metadata.name\n              value: \'${ .name }\'\n          payload:\n            apiVersion: v1\n            kind: Pod\n            metadata:\n              name: "aa"\n            spec:\n              containers:\n                - image: \'nginx:latest\'\n                  name: nginx\n                  ports:\n                    - containerPort: 80\n  resourcesRefs:\n    items:\n      - id: resource-ref-1\n        apiVersion: v1\n        resource: pods\n        name: my-pod-name\n        namespace: krateo-system\n        verb: POST\nYAML\n'})}),"\n",(0,i.jsxs)(n.p,{children:["NB: this is a different file that the previous one that uses the same ",(0,i.jsx)(n.code,{children:"Button"})," widget but with a different widget referenced in the action, so it will overwrite the previous one."]}),"\n",(0,i.jsx)(n.p,{children:"Clicking the button should open a drawer with a form, fill the form and click submit, you should see a new pod created in the cluster."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"drawer-form",src:t(8632).c+"",width:"3016",height:"1686"})}),"\n",(0,i.jsx)(n.h3,{id:"how-it-works",children:"how it works"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"Form"})," rest action is used to create a new resource in the cluster, in this example it uses a static stringSchema, usually this schema or a resource is retrieved from the cluster using a restAction."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"payloadToOverride"})," is used to override the payload of the ",(0,i.jsx)(n.code,{children:"rest"})," action with the value from the form.\nThe ",(0,i.jsx)(n.code,{children:"payloadKey"})," section is used to specify the key of the payload to override, in this case ",(0,i.jsx)(n.code,{children:"spec"})]})]})}function l(e={}){const{wrapper:n}={...(0,r.M)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},6336:(e,n,t)=>{t.d(n,{c:()=>i});const i=t.p+"assets/images/01_drawer_paragraph-dc9716c81d1deec2e2663d3796be836f.gif"},8632:(e,n,t)=>{t.d(n,{c:()=>i});const i=t.p+"assets/images/02_drawer_form-869e414a102a970257ac815a1e359c34.png"},2172:(e,n,t)=>{t.d(n,{I:()=>o,M:()=>s});var i=t(1504);const r={},a=i.createContext(r);function s(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);